import asyncio
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from weather_api import WeatherAPI
from news_api import NewsAPI
from currency_api import CurrencyAPI
import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class AdvancedWeatherBot:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –ø–æ–≥–æ–¥—ã, –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –≤–∞–ª—é—Ç"""
    
    def __init__(self):
        self.weather_api = WeatherAPI()
        self.news_api = NewsAPI()
        self.currency_api = CurrencyAPI()
        self.application = None
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        keyboard = [
            [InlineKeyboardButton("üå§Ô∏è –ü–æ–≥–æ–¥–∞", callback_data="weather_menu")],
            [InlineKeyboardButton("üì∞ –ù–æ–≤–æ—Å—Ç–∏", callback_data="news_menu")],
            [InlineKeyboardButton("üí± –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç", callback_data="currency_menu")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_text = """
ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Advanced Weather Bot!**

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:
‚Ä¢ üå§Ô∏è –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –ª—é–±–æ–º –≥–æ—Ä–æ–¥–µ
‚Ä¢ üì∞ –ß–∏—Ç–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
‚Ä¢ üí± –°–ª–µ–¥–∏—Ç—å –∑–∞ –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç
‚Ä¢ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:
        """.strip()
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìö **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:**

**üå§Ô∏è –ü–æ–≥–æ–¥–∞:**
‚Ä¢ `/weather <–≥–æ—Ä–æ–¥>` - —Ç–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞
‚Ä¢ `/forecast <–≥–æ—Ä–æ–¥>` - –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π

**üì∞ –ù–æ–≤–æ—Å—Ç–∏:**
‚Ä¢ `/news` - —Ç–æ–ø –Ω–æ–≤–æ—Å—Ç–∏ –†–æ—Å—Å–∏–∏
‚Ä¢ `/news <–∫–∞—Ç–µ–≥–æ—Ä–∏—è>` - –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
‚Ä¢ `/search <–∑–∞–ø—Ä–æ—Å>` - –ø–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π

**üí± –í–∞–ª—é—Ç—ã:**
‚Ä¢ `/currency` - –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
‚Ä¢ `/convert <—Å—É–º–º–∞> <–∏–∑> <–≤>` - –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä

**‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:**
‚Ä¢ `/settings` - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞

üí° **–°–æ–≤–µ—Ç:** –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã!
        """.strip()
        
        await update.message.reply_text(help_text)
    
    # === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–û–ì–û–î–´ ===
    async def weather_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /weather <–≥–æ—Ä–æ–¥>"""
        if not context.args:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥!\n"
                "–ü—Ä–∏–º–µ—Ä: /weather –ú–æ—Å–∫–≤–∞"
            )
            return
        
        city = " ".join(context.args)
        await self._show_current_weather(update, context, city)
    
    async def forecast_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /forecast <–≥–æ—Ä–æ–¥>"""
        if not context.args:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥!\n"
                "–ü—Ä–∏–º–µ—Ä: /forecast –ú–æ—Å–∫–≤–∞"
            )
            return
        
        city = " ".join(context.args)
        await self._show_forecast(update, context, city)
    
    # === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ù–û–í–û–°–¢–ï–ô ===
    async def news_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /news"""
        category = context.args[0] if context.args else "general"
        await self._show_news(update, context, category)
    
    async def search_news_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search <–∑–∞–ø—Ä–æ—Å>"""
        if not context.args:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å!\n"
                "–ü—Ä–∏–º–µ—Ä: /search —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"
            )
            return
        
        query = " ".join(context.args)
        await self._search_news(update, context, query)
    
    # === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –í–ê–õ–Æ–¢ ===
    async def currency_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /currency"""
        await self._show_currency_rates(update, context)
    
    async def convert_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /convert <—Å—É–º–º–∞> <–∏–∑> <–≤>"""
        if len(context.args) != 3:
            await update.message.reply_text(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n"
                "–ü—Ä–∏–º–µ—Ä: /convert 100 USD RUB"
            )
            return
        
        try:
            amount = float(context.args[0])
            from_currency = context.args[1].upper()
            to_currency = context.args[2].upper()
            await self._convert_currency(update, context, amount, from_currency, to_currency)
        except ValueError:
            await update.message.reply_text("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
    
    # === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ù–ê–°–¢–†–û–ï–ö ===
    async def settings_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings"""
        await self._show_settings(update, context)
    
    # === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô ===
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text.strip()
        
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–≥–æ–¥—É
        if len(text) > 1 and text.replace(' ', '').isalpha():
            await self._show_current_weather(update, context, text)
        else:
            await update.message.reply_text(
                "üå§Ô∏è –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É!\n"
                "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/weather <–≥–æ—Ä–æ–¥> - –ø–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å\n"
                "/forecast <–≥–æ—Ä–æ–¥> - –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π\n"
                "/news - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏\n"
                "/currency - –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç"
            )
    
    # === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK ===
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "weather_menu":
            await self._show_weather_menu(query)
        elif query.data == "news_menu":
            await self._show_news_menu(query)
        elif query.data == "currency_menu":
            await self._show_currency_menu(query)
        elif query.data == "settings":
            await self._show_settings_menu(query)
        elif query.data == "help":
            await self._show_help_menu(query)
        elif query.data == "back_to_main":
            await self._show_main_menu(query)
        elif query.data.startswith("weather_"):
            await self._handle_weather_callback(query, context)
        elif query.data.startswith("news_"):
            await self._handle_news_callback(query, context)
        elif query.data.startswith("currency_"):
            await self._handle_currency_callback(query, context)
        elif query.data.startswith("settings_"):
            await self._handle_settings_callback(query, context)
    
    # === –ú–ï–ù–Æ –ü–û–ì–û–î–´ ===
    async def _show_weather_menu(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ–≥–æ–¥—ã"""
        keyboard = [
            [InlineKeyboardButton("üå§Ô∏è –ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å", callback_data="weather_current")],
            [InlineKeyboardButton("üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π", callback_data="weather_forecast")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üå§Ô∏è **–ú–µ–Ω—é –ø–æ–≥–æ–¥—ã**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å:",
            reply_markup=reply_markup
        )
    
    # === –ú–ï–ù–Æ –ù–û–í–û–°–¢–ï–ô ===
    async def _show_news_menu(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–æ–≤–æ—Å—Ç–µ–π"""
        categories = self.news_api.get_available_categories()
        keyboard = []
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–ø–æ 2 –≤ —Ä—è–¥)
        for i in range(0, len(categories), 2):
            row = []
            row.append(InlineKeyboardButton(
                categories[i].title(), 
                callback_data=f"news_category_{categories[i]}"
            ))
            if i + 1 < len(categories):
                row.append(InlineKeyboardButton(
                    categories[i + 1].title(), 
                    callback_data=f"news_category_{categories[i + 1]}"
                ))
            keyboard.append(row)
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üì∞ **–ú–µ–Ω—é –Ω–æ–≤–æ—Å—Ç–µ–π**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–æ–≤–æ—Å—Ç–µ–π:",
            reply_markup=reply_markup
        )
    
    # === –ú–ï–ù–Æ –í–ê–õ–Æ–¢ ===
    async def _show_currency_menu(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤–∞–ª—é—Ç"""
        keyboard = [
            [InlineKeyboardButton("üí± –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç", callback_data="currency_rates")],
            [InlineKeyboardButton("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä", callback_data="currency_converter")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üí± **–ú–µ–Ω—é –≤–∞–ª—é—Ç**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é:",
            reply_markup=reply_markup
        )
    
    # === –ú–ï–ù–Æ –ù–ê–°–¢–†–û–ï–ö ===
    async def _show_settings_menu(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        keyboard = [
            [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="settings_lang_ru")],
            [InlineKeyboardButton("üá∫üá∏ English", callback_data="settings_lang_en")],
            [InlineKeyboardButton("üå°Ô∏è –¶–µ–ª—å—Å–∏–π", callback_data="settings_units_metric")],
            [InlineKeyboardButton("üå°Ô∏è –§–∞—Ä–µ–Ω–≥–µ–π—Ç", callback_data="settings_units_imperial")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è:",
            reply_markup=reply_markup
        )
    
    # === –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ===
    async def _show_main_menu(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = [
            [InlineKeyboardButton("üå§Ô∏è –ü–æ–≥–æ–¥–∞", callback_data="weather_menu")],
            [InlineKeyboardButton("üì∞ –ù–æ–≤–æ—Å—Ç–∏", callback_data="news_menu")],
            [InlineKeyboardButton("üí± –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç", callback_data="currency_menu")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "ü§ñ **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:",
            reply_markup=reply_markup
        )
    
    # === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK –ü–û –§–£–ù–ö–¶–ò–Ø–ú ===
    async def _handle_weather_callback(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –ø–æ–≥–æ–¥—ã"""
        if query.data == "weather_current":
            await query.edit_message_text(
                "üå§Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã:"
            )
            context.user_data['waiting_for'] = 'weather_current'
        elif query.data == "weather_forecast":
            await query.edit_message_text(
                "üìÖ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ 5 –¥–Ω–µ–π:"
            )
            context.user_data['waiting_for'] = 'weather_forecast'
    
    async def _handle_news_callback(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π"""
        if query.data.startswith("news_category_"):
            category = query.data.split("_")[2]
            await self._show_news_by_category(query, context, category)
    
    async def _handle_currency_callback(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –≤–∞–ª—é—Ç"""
        if query.data == "currency_rates":
            await self._show_currency_rates_callback(query, context)
        elif query.data == "currency_converter":
            await query.edit_message_text(
                "üîÑ **–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç**\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                "`/convert <—Å—É–º–º–∞> <–∏–∑> <–≤>`\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ `/convert 100 USD RUB`\n"
                "‚Ä¢ `/convert 50 EUR USD`\n"
                "‚Ä¢ `/convert 1000 RUB EUR`\n\n"
                "üîô –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞:",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="currency_menu")
                ]])
            )
    
    async def _handle_settings_callback(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        if query.data.startswith("settings_lang_"):
            lang = query.data.split("_")[2]
            self.weather_api.language = lang
            await query.edit_message_text(f"‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {lang.upper()}")
        elif query.data.startswith("settings_units_"):
            units = query.data.split("_")[2]
            self.weather_api.units = units
            await query.edit_message_text(f"‚úÖ –ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω—ã –Ω–∞: {units}")
    
    # === –§–£–ù–ö–¶–ò–ò –ü–û–ö–ê–ó–ê –î–ê–ù–ù–´–• ===
    async def _show_current_weather(self, update: Update, context: ContextTypes.DEFAULT_TYPE, city: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É"""
        await update.message.reply_text(f"üå§Ô∏è –ü–æ–ª—É—á–∞—é –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}...")
        
        weather_data = await self.weather_api.get_current_weather(city)
        
        if weather_data:
            emoji = self.weather_api.get_weather_emoji(weather_data['icon'])
            temp_unit = "¬∞C" if self.weather_api.units == "metric" else "¬∞F"
            wind_unit = "–º/—Å" if self.weather_api.units == "metric" else "–º–∏–ª—å/—á"
            
            message = f"""
{emoji} **–ü–æ–≥–æ–¥–∞ –≤ {weather_data['city']}, {weather_data['country']}**

üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather_data['temperature']}{temp_unit}
üå°Ô∏è –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {weather_data['feels_like']}{temp_unit}
‚òÅÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: {weather_data['description']}
üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather_data['humidity']}%
üå™Ô∏è –í–µ—Ç–µ—Ä: {weather_data['wind_speed']} {wind_unit}
üìä –î–∞–≤–ª–µ–Ω–∏–µ: {weather_data['pressure']} –≥–ü–∞
            """.strip()
            
            await update.message.reply_text(message)
        else:
            await update.message.reply_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞."
            )
    
    async def _show_forecast(self, update: Update, context: ContextTypes.DEFAULT_TYPE, city: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã"""
        await update.message.reply_text(f"üìÖ –ü–æ–ª—É—á–∞—é –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}...")
        
        forecast_data = await self.weather_api.get_forecast(city)
        
        if forecast_data:
            temp_unit = "¬∞C" if self.weather_api.units == "metric" else "¬∞F"
            
            message = f"üìÖ **–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ {forecast_data['city']}, {forecast_data['country']}**\n\n"
            
            for forecast in forecast_data['forecasts']:
                emoji = self.weather_api.get_weather_emoji(forecast['icon'])
                date = forecast['date']
                message += f"{emoji} **{date}**\n"
                message += f"üå°Ô∏è {forecast['temperature']}{temp_unit} | üíß {forecast['humidity']}%\n"
                message += f"‚òÅÔ∏è {forecast['description']}\n\n"
            
            await update.message.reply_text(message.strip())
        else:
            await update.message.reply_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞."
            )
    
    async def _show_news(self, update: Update, context: ContextTypes.DEFAULT_TYPE, category: str = "general"):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        await update.message.reply_text(f"üì∞ –ü–æ–ª—É—á–∞—é –Ω–æ–≤–æ—Å—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'...")
        
        news_data = await self.news_api.get_top_headlines(country="ru", category=category, limit=5)
        
        if news_data:
            message = f"üì∞ **–¢–æ–ø –Ω–æ–≤–æ—Å—Ç–∏ –†–æ—Å—Å–∏–∏ - {category.title()}**\n\n"
            
            for i, news in enumerate(news_data, 1):
                message += f"**{i}. {news['title']}**\n"
                message += f"üìù {news['description']}\n"
                message += f"üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫: {news['source']}\n"
                if news['url']:
                    message += f"üîó [–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ]({news['url']})\n"
                message += "\n"
            
            await update.message.reply_text(message.strip(), disable_web_page_preview=True)
        else:
            await update.message.reply_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'.\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."
            )
    
    async def _search_news(self, update: Update, context: ContextTypes.DEFAULT_TYPE, query: str):
        """–ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
        await update.message.reply_text(f"üîç –ò—â—É –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'...")
        
        news_data = await self.news_api.search_news(query, limit=5)
        
        if news_data:
            message = f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: '{query}'**\n\n"
            
            for i, news in enumerate(news_data, 1):
                message += f"**{i}. {news['title']}**\n"
                message += f"üìù {news['description']}\n"
                message += f"üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫: {news['source']}\n"
                if news['url']:
                    message += f"üîó [–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ]({news['url']})\n"
                message += "\n"
            
            await update.message.reply_text(message.strip(), disable_web_page_preview=True)
        else:
            await update.message.reply_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å."
            )
    
    async def _show_news_by_category(self, query, context, category: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ callback"""
        await query.edit_message_text(f"üì∞ –ü–æ–ª—É—á–∞—é –Ω–æ–≤–æ—Å—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'...")
        
        news_data = await self.news_api.get_top_headlines(country="ru", category=category, limit=5)
        
        if news_data:
            message = f"üì∞ **–¢–æ–ø –Ω–æ–≤–æ—Å—Ç–∏ –†–æ—Å—Å–∏–∏ - {category.title()}**\n\n"
            
            for i, news in enumerate(news_data, 1):
                message += f"**{i}. {news['title']}**\n"
                message += f"üìù {news['description']}\n"
                message += f"üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫: {news['source']}\n"
                if news['url']:
                    message += f"üîó [–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ]({news['url']})\n"
                message += "\n"
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="news_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                message.strip(), 
                reply_markup=reply_markup,
                disable_web_page_preview=True
            )
        else:
            await query.edit_message_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="news_menu")
                ]])
            )
    
    async def _show_currency_rates(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç"""
        await update.message.reply_text("üí± –ü–æ–ª—É—á–∞—é –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç...")
        
        rates_data = await self.currency_api.get_all_rates("RUB")
        
        if rates_data:
            popular_currencies = self.currency_api.get_popular_currencies()
            message = f"üí± **–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ {rates_data['base']}**\n"
            message += f"üìÖ –î–∞—Ç–∞: {rates_data['date']}\n\n"
            
            for currency, name in popular_currencies.items():
                if currency != "RUB" and currency in rates_data['rates']:
                    rate = rates_data['rates'][currency]
                    symbol = self.currency_api.get_currency_symbol(currency)
                    message += f"{symbol} **{currency}**: {rate:.4f}\n"
            
            await update.message.reply_text(message.strip())
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def _show_currency_rates_callback(self, query, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç —á–µ—Ä–µ–∑ callback"""
        await query.edit_message_text("üí± –ü–æ–ª—É—á–∞—é –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç...")
        
        rates_data = await self.currency_api.get_all_rates("RUB")
        
        if rates_data:
            popular_currencies = self.currency_api.get_popular_currencies()
            message = f"üí± **–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ {rates_data['base']}**\n"
            message += f"üìÖ –î–∞—Ç–∞: {rates_data['date']}\n\n"
            
            for currency, name in popular_currencies.items():
                if currency != "RUB" and currency in rates_data['rates']:
                    rate = rates_data['rates'][currency]
                    symbol = self.currency_api.get_currency_symbol(currency)
                    message += f"{symbol} **{currency}**: {rate:.4f}\n"
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="currency_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                message.strip(),
                reply_markup=reply_markup
            )
        else:
            await query.edit_message_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="currency_menu")
                ]])
            )
    
    async def _convert_currency(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                               amount: float, from_currency: str, to_currency: str):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—É"""
        await update.message.reply_text(
            f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é {amount} {from_currency} –≤ {to_currency}..."
        )
        
        conversion_data = await self.currency_api.convert_currency(amount, from_currency, to_currency)
        
        if conversion_data:
            from_symbol = self.currency_api.get_currency_symbol(from_currency)
            to_symbol = self.currency_api.get_currency_symbol(to_currency)
            
            message = f"""
üîÑ **–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç**

üí∞ **{amount} {from_symbol}{from_currency}** = **{conversion_data['converted_amount']} {to_symbol}{to_currency}**

üìä –ö—É—Ä—Å: 1 {from_currency} = {conversion_data['rate']:.4f} {to_currency}
üìÖ –î–∞—Ç–∞: {conversion_data['date']}
            """.strip()
            
            await update.message.reply_text(message)
        else:
            await update.message.reply_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å {amount} {from_currency} –≤ {to_currency}.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–æ–≤ –≤–∞–ª—é—Ç."
            )
    
    async def _show_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        await self._show_settings_menu(update)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not config.BOT_TOKEN:
            logger.error("–ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞! –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å TELEGRAM_BOT_TOKEN")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.application = Application.builder().token(config.BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("weather", self.weather_command))
        self.application.add_handler(CommandHandler("forecast", self.forecast_command))
        self.application.add_handler(CommandHandler("news", self.news_command))
        self.application.add_handler(CommandHandler("search", self.search_news_command))
        self.application.add_handler(CommandHandler("currency", self.currency_command))
        self.application.add_handler(CommandHandler("convert", self.convert_command))
        self.application.add_handler(CommandHandler("settings", self.settings_command))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        self.application.run_polling()

if __name__ == "__main__":
    bot = AdvancedWeatherBot()
    bot.run()
