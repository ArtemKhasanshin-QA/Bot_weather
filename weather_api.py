import aiohttp
import asyncio
from typing import Dict, Optional, List
import config

class WeatherAPI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenWeatherMap API"""
    
    def __init__(self):
        self.api_key = config.OPENWEATHER_API_KEY
        self.base_url = config.OPENWEATHER_BASE_URL
        self.language = config.DEFAULT_LANGUAGE
        self.units = config.DEFAULT_UNITS
    
    async def get_current_weather(self, city: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ"""
        if not self.api_key:
            return None
            
        url = f"{self.base_url}{config.WEATHER_ENDPOINT}"
        params = {
            'q': city,
            'appid': self.api_key,
            'lang': self.language,
            'units': self.units
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url, params=params) as response:
                    if response.status == 200:
                        data = await response.json()
                        return self._format_current_weather(data)
                    else:
                        return None
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {e}")
            return None
    
    async def get_forecast(self, city: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 5 –¥–Ω–µ–π"""
        if not self.api_key:
            return None
            
        url = f"{self.base_url}{config.FORECAST_ENDPOINT}"
        params = {
            'q': city,
            'appid': self.api_key,
            'lang': self.language,
            'units': self.units
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url, params=params) as response:
                    if response.status == 200:
                        data = await response.json()
                        return self._format_forecast(data)
                    else:
                        return None
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
            return None
    
    def _format_current_weather(self, data: Dict) -> Dict:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥–µ"""
        try:
            weather = data['weather'][0]
            main = data['main']
            wind = data.get('wind', {})
            
            return {
                'city': data['name'],
                'country': data['sys']['country'],
                'description': weather['description'].capitalize(),
                'temperature': round(main['temp']),
                'feels_like': round(main['feels_like']),
                'humidity': main['humidity'],
                'pressure': main['pressure'],
                'wind_speed': wind.get('speed', 0),
                'icon': weather['icon']
            }
        except KeyError as e:
            print(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–≥–æ–¥—ã: {e}")
            return None
    
    def _format_forecast(self, data: Dict) -> Dict:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã"""
        try:
            city = data['city']['name']
            country = data['city']['country']
            forecasts = []
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã –ø–æ –¥–Ω—è–º (–±–µ—Ä–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 12:00 –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è)
            daily_forecasts = {}
            
            for item in data['list']:
                date = item['dt_txt'].split(' ')[0]
                time = item['dt_txt'].split(' ')[1]
                
                # –ë–µ—Ä–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –ø–æ–ª–¥–µ–Ω—å (12:00)
                if time == "12:00:00" and len(daily_forecasts) < 5:
                    weather = item['weather'][0]
                    main = item['main']
                    
                    daily_forecasts[date] = {
                        'date': date,
                        'description': weather['description'].capitalize(),
                        'temperature': round(main['temp']),
                        'humidity': main['humidity'],
                        'icon': weather['icon']
                    }
            
            return {
                'city': city,
                'country': country,
                'forecasts': list(daily_forecasts.values())
            }
        except KeyError as e:
            print(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
            return None
    
    def get_weather_emoji(self, icon: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è –ø–æ–≥–æ–¥—ã –ø–æ –∫–æ–¥—É –∏–∫–æ–Ω–∫–∏"""
        emoji_map = {
            '01d': '‚òÄÔ∏è',  # —è—Å–Ω–æ –¥–Ω–µ–º
            '01n': 'üåô',  # —è—Å–Ω–æ –Ω–æ—á—å—é
            '02d': '‚õÖ',  # –º–∞–ª–æ–æ–±–ª–∞—á–Ω–æ –¥–Ω–µ–º
            '02n': '‚òÅÔ∏è',  # –º–∞–ª–æ–æ–±–ª–∞—á–Ω–æ –Ω–æ—á—å—é
            '03d': '‚òÅÔ∏è',  # –æ–±–ª–∞—á–Ω–æ
            '03n': '‚òÅÔ∏è',
            '04d': '‚òÅÔ∏è',  # –ø–∞—Å–º—É—Ä–Ω–æ
            '04n': '‚òÅÔ∏è',
            '09d': 'üåßÔ∏è',  # –¥–æ–∂–¥—å
            '09n': 'üåßÔ∏è',
            '10d': 'üå¶Ô∏è',  # –¥–æ–∂–¥—å —Å —Å–æ–ª–Ω—Ü–µ–º
            '10n': 'üåßÔ∏è',
            '11d': '‚õàÔ∏è',  # –≥—Ä–æ–∑–∞
            '11n': '‚õàÔ∏è',
            '13d': '‚ùÑÔ∏è',  # —Å–Ω–µ–≥
            '13n': '‚ùÑÔ∏è',
            '50d': 'üå´Ô∏è',  # —Ç—É–º–∞–Ω
            '50n': 'üå´Ô∏è'
        }
        return emoji_map.get(icon, 'üå§Ô∏è')
