import asyncio
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from weather_api import WeatherAPI
import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class WeatherBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞ –¥–ª—è –ø–æ–≥–æ–¥—ã"""
    
    def __init__(self):
        self.weather_api = WeatherAPI()
        self.application = None
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        keyboard = [
            [InlineKeyboardButton("üå§Ô∏è –ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å", callback_data="weather_now")],
            [InlineKeyboardButton("üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π", callback_data="weather_forecast")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            config.WELCOME_MESSAGE,
            reply_markup=reply_markup
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        await update.message.reply_text(config.HELP_MESSAGE)
    
    async def weather_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /weather <–≥–æ—Ä–æ–¥>"""
        if not context.args:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥!\n"
                "–ü—Ä–∏–º–µ—Ä: /weather –ú–æ—Å–∫–≤–∞"
            )
            return
        
        city = " ".join(context.args)
        await self._show_current_weather(update, context, city)
    
    async def forecast_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /forecast <–≥–æ—Ä–æ–¥>"""
        if not context.args:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥!\n"
                "–ü—Ä–∏–º–µ—Ä: /forecast –ú–æ—Å–∫–≤–∞"
            )
            return
        
        city = " ".join(context.args)
        await self._show_forecast(update, context, city)
    
    async def settings_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings"""
        keyboard = [
            [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")],
            [InlineKeyboardButton("üá∫üá∏ English", callback_data="lang_en")],
            [InlineKeyboardButton("üå°Ô∏è –¶–µ–ª—å—Å–∏–π", callback_data="units_metric")],
            [InlineKeyboardButton("üå°Ô∏è –§–∞—Ä–µ–Ω–≥–µ–π—Ç", callback_data="units_imperial")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è:",
            reply_markup=reply_markup
        )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤)"""
        text = update.message.text.strip()
        
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–≥–æ–¥—É
        if len(text) > 1 and text.isalpha():
            await self._show_current_weather(update, context, text)
        else:
            await update.message.reply_text(
                "üå§Ô∏è –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É!\n"
                "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/weather <–≥–æ—Ä–æ–¥> - –ø–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å\n"
                "/forecast <–≥–æ—Ä–æ–¥> - –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π"
            )
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "weather_now":
            await query.edit_message_text(
                "üå§Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã:"
            )
            context.user_data['waiting_for'] = 'weather'
            
        elif query.data == "weather_forecast":
            await query.edit_message_text(
                "üìÖ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ 5 –¥–Ω–µ–π:"
            )
            context.user_data['waiting_for'] = 'forecast'
            
        elif query.data == "settings":
            await self._show_settings(query)
            
        elif query.data == "help":
            await query.edit_message_text(config.HELP_MESSAGE)
            
        elif query.data == "back_to_main":
            await self._show_main_menu(query)
            
        elif query.data.startswith("lang_"):
            lang = query.data.split("_")[1]
            self.weather_api.language = lang
            await query.edit_message_text(f"‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {lang.upper()}")
            
        elif query.data.startswith("units_"):
            units = query.data.split("_")[1]
            self.weather_api.units = units
            await query.edit_message_text(f"‚úÖ –ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω—ã –Ω–∞: {units}")
    
    async def _show_current_weather(self, update: Update, context: ContextTypes.DEFAULT_TYPE, city: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É"""
        await update.message.reply_text(f"üå§Ô∏è –ü–æ–ª—É—á–∞—é –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}...")
        
        weather_data = await self.weather_api.get_current_weather(city)
        
        if weather_data:
            emoji = self.weather_api.get_weather_emoji(weather_data['icon'])
            temp_unit = "¬∞C" if self.weather_api.units == "metric" else "¬∞F"
            wind_unit = "–º/—Å" if self.weather_api.units == "metric" else "–º–∏–ª—å/—á"
            
            message = f"""
{emoji} **–ü–æ–≥–æ–¥–∞ –≤ {weather_data['city']}, {weather_data['country']}**

üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather_data['temperature']}{temp_unit}
üå°Ô∏è –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {weather_data['feels_like']}{temp_unit}
‚òÅÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: {weather_data['description']}
üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather_data['humidity']}%
üå™Ô∏è –í–µ—Ç–µ—Ä: {weather_data['wind_speed']} {wind_unit}
üìä –î–∞–≤–ª–µ–Ω–∏–µ: {weather_data['pressure']} –≥–ü–∞
            """.strip()
            
            await update.message.reply_text(message)
        else:
            await update.message.reply_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞."
            )
    
    async def _show_forecast(self, update: Update, context: ContextTypes.DEFAULT_TYPE, city: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã"""
        await update.message.reply_text(f"üìÖ –ü–æ–ª—É—á–∞—é –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}...")
        
        forecast_data = await self.weather_api.get_forecast(city)
        
        if forecast_data:
            temp_unit = "¬∞C" if self.weather_api.units == "metric" else "¬∞F"
            
            message = f"üìÖ **–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ {forecast_data['city']}, {forecast_data['country']}**\n\n"
            
            for forecast in forecast_data['forecasts']:
                emoji = self.weather_api.get_weather_emoji(forecast['icon'])
                date = forecast['date']
                message += f"{emoji} **{date}**\n"
                message += f"üå°Ô∏è {forecast['temperature']}{temp_unit} | üíß {forecast['humidity']}%\n"
                message += f"‚òÅÔ∏è {forecast['description']}\n\n"
            
            await update.message.reply_text(message.strip())
        else:
            await update.message.reply_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞."
            )
    
    async def _show_settings(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        keyboard = [
            [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")],
            [InlineKeyboardButton("üá∫üá∏ English", callback_data="lang_en")],
            [InlineKeyboardButton("üå°Ô∏è –¶–µ–ª—å—Å–∏–π", callback_data="units_metric")],
            [InlineKeyboardButton("üå°Ô∏è –§–∞—Ä–µ–Ω–≥–µ–π—Ç", callback_data="units_imperial")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è:",
            reply_markup=reply_markup
        )
    
    async def _show_main_menu(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = [
            [InlineKeyboardButton("üå§Ô∏è –ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å", callback_data="weather_now")],
            [InlineKeyboardButton("üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π", callback_data="weather_forecast")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            config.WELCOME_MESSAGE,
            reply_markup=reply_markup
        )
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not config.BOT_TOKEN:
            logger.error("–ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞! –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å TELEGRAM_BOT_TOKEN")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.application = Application.builder().token(config.BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("weather", self.weather_command))
        self.application.add_handler(CommandHandler("forecast", self.forecast_command))
        self.application.add_handler(CommandHandler("settings", self.settings_command))
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        self.application.run_polling()

if __name__ == "__main__":
    bot = WeatherBot()
    bot.run()
